---
#
### GIS.lab DESKTOP CLIENT ###
#
# Install and configure GIS.lab client.
#
# Logging: syslog, kern.log


- name: Install packages
  apt:
    name: debootstrap
    force: yes
    install_recommends: no
    state: latest


- name: Create GIS.lab Desktop client root directory
  file:
    dest: "{{ root_dir }}"
    state: directory


- name: Create basic directories structure
  file:
    path: "{{ root_dir }}/root{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items:
    - {
        path: "{{ GISLAB_ROOT }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_SECRET }}",
        owner: root,
        group: root,
        mode: "0700"
      }
    - {
        path: "{{ GISLAB_PATH_SYSTEM }}",
        owner: root,
        group: root,
        mode: "0755"
      }


### INITIAL SYSTEM INSTALLATION
# debootstrap
- name: Detect if base system is already installed by debootstrap
  stat:
    path: "{{ root_dir }}/root/bin/bash"
  register: debootstrap_status
  changed_when: False

- name: Install base system
  shell: >
    http_proxy="{{ GISLAB_APT_HTTP_PROXY }}"
    debootstrap
    --arch {{ GISLAB_CLIENT_ARCHITECTURE }}
    {{ ansible_distribution_release }}
    {{ root_dir }}/root
    {{ GISLAB_APT_MIRROR }}
  when: not debootstrap_status.stat.exists


# locale
- name: Generate locale
  command: >
    chroot {{ root_dir }}/root locale-gen en_US.UTF-8

- name: Copy locale default configuration file
  command: >
    cp
    /etc/default/locale
    {{ root_dir }}/root/etc/default/locale

# timezone
- name: Configure timezone
  command: >
    cp --remove-destination {{ item }} {{ root_dir }}/root{{ item }}
  with_items:
    - /etc/timezone
    - /etc/localtime


# network configuration
- name: Install empty hostname file
  shell: echo > {{ root_dir }}/root/etc/hostname

- name: Set alias for loopback network interface in /etc/hostname
  template:
    src: hosts/hosts.j2
    dest: "{{ root_dir }}/root/etc/hosts"

- name: Configure loopback network interface
  template:
    src: netplan/50-gislab.j2
    dest: "{{ root_dir }}/root/etc/netplan/50-gislab.yaml"


# fstab
- name: Configure mount points
  template:
    src: fstab/fstab.j2
    dest: "{{ root_dir }}/root/etc/fstab"

- name: Replace '/etc/mtab' file with symlink to '/proc/mounts'
  command: chroot {{ root_dir }}/root {{ item }}
  with_items:
    - rm -f /etc/mtab
    - ln -sf /proc/mounts /etc/mtab


# root password
- name: Disable root login
  command: chroot {{ root_dir }}/root passwd -l root


# version
- name: Install '/etc/gislab_version' file
  command: >
    cp
    /etc/gislab_version
    {{ root_dir }}/root/etc/gislab_version


### INSTALLATION
- name: Mount /dev/pts and /proc
  command: >
    chroot {{ root_dir }}/root
    mount {{ item.opts }} {{ item.src }} {{ item.dest }}
  with_items:
    - {
        src: "devpts",
        dest: "/dev/pts",
        opts: "-t devpts -o rw,noexec,nosuid,gid=5,mode=620"
      }
    - {
        src: "proc",
        dest: "/proc",
        opts: "-t proc"
      }


# apt
- name: Purge apt configuration directory
  file:
    dest: "{{ root_dir }}/root/etc/apt"
    state: absent

- name: Copy apt configuration from server
  command: cp -a /etc/apt {{ root_dir }}/root/etc/


- name: Remove debian packages cached during debootstrap
  file: path="{{ root_dir }}/root/var/cache/apt/archives/*.deb" state=absent


- name: Activate shared apt cache
  mount:
    path: "{{ root_dir }}/root/var/cache/apt"
    src: "{{ GISLAB_PATH_CACHE }}/packages/apt"
    opts: bind
    state: mounted
    fstype: none

# shared packages cache
- name: Create mount point for shared packages cache
  file:
    dest: "{{ root_dir }}/root{{ GISLAB_PATH_CACHE }}/packages"
    state: directory
    recurse: yes

- name: Activate shared packages cache
  mount:
    path: "{{ root_dir }}/root{{ GISLAB_PATH_CACHE }}/packages"
    src: "{{ GISLAB_PATH_CACHE }}/packages"
    opts: bind
    state: mounted
    fstype: none

# daemons handling
- name: Backup original 'start-stop-daemon' binary
  command: >
    mv
    {{ root_dir }}/root/sbin/start-stop-daemon
    {{ root_dir }}/root/sbin/start-stop-daemon.real

- name: Avoid running daemons while installing
  template:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
    mode: 0755
  with_items:
    - {
        src: "bin/policy-rc.d.j2",
        dest: "/usr/sbin/policy-rc.d"
      }
    - {
        src: "bin/start-stop-daemon.j2",
        dest: "/sbin/start-stop-daemon"
      }


# system upgrade
- name: Update apt cache
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} update
  args:
    executable: /bin/bash

- name: Upgrade system
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} dist-upgrade
  args:
    executable: /bin/bash


# install packages
- name: Install GIS.lab client minimal OS packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} install ubuntu-standard
  args:
    executable: /bin/bash

- name: Install GIS.lab client base packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} install {{ packages_base|join(' ') }}
  args:
    executable: /bin/bash

- name: Install GIS.lab client desktop packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} install {{ packages_desktop|join(' ') }}
  args:
    executable: /bin/bash
  when: GISLAB_SUITE in ('office', 'lab')

- name: Add Mozilla team PPA
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    add-apt-repository -y ppa:mozillateam/ppa
  args:
    executable: /bin/bash
  when: GISLAB_SUITE in ('office', 'lab')

- name: Configure Mozilla team PPA
  copy:
    src: "static/mozilla/{{ item.src }}"
    dest: "{{ root_dir }}/root/etc/apt/{{ item.dest }}"
  with_items:
    - {
        src: "preferences",
        dest: "preferences.d/mozilla-firefox"
      }
    - {
        src: "upgrades",
        dest: "apt.conf.d/51unattended-upgrades-firefox"
      }
  when: GISLAB_SUITE in ('office', 'lab')

- name: Add Graphics Drivers PPA repository
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    add-apt-repository -y ppa:graphics-drivers/ppa
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_NVIDIA_GRAPHICS_DRIVER

- name: Install NVIDIA proprietary graphics driver
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} install nvidia-driver-{{ nvidia_driver_version }}
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_NVIDIA_GRAPHICS_DRIVER

- name: Install GIS.lab client office packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get --no-install-recommends {{ apt_get_opts }} install {{ packages_office|join(' ') }}
  args:
    executable: /bin/bash
  when: GISLAB_SUITE in ('office', 'lab')

- name: Install GIS.lab client GIS packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get --no-install-recommends {{ apt_get_opts }} install {{ packages_lab|join(' ') }}
    &&
    chroot {{ root_dir }}/root
    pip3 install {{ packages_lab_pip|join(' ') }} --break-system-packages
  args:
    executable: /bin/bash
  when: GISLAB_SUITE == 'lab'

- name: Check PyCharm IDE
  stat:
    path: "{{ root_dir }}/root/opt/pycharm-community-{{ pycharm_version }}"
  register: pycharm_dir

- name: Install PyCharm IDE
  unarchive:
    src: "https://download.jetbrains.com/python/pycharm-community-{{ pycharm_version }}.tar.gz"
    dest: "{{ root_dir }}/root/opt/"
    remote_src: yes
  when: GISLAB_SUITE == 'lab' and not pycharm_dir.stat.exists

- name: Create PyCharm version-independent executable
  file:
    src: "/opt/pycharm-community-{{ pycharm_version }}/bin/pycharm.sh"
    dest: "{{ root_dir }}/root/usr/local/bin/pycharm"
    state: link
    force: yes
  when: GISLAB_SUITE == 'lab'

- name: Install OWS worker packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get --no-install-recommends {{ apt_get_opts }} install {{ packages_worker|join(' ') }}
  args:
    executable: /bin/bash
  when: GISLAB_SUITE in ('server', 'lab')


# language support
- name: Install language support
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get {{ apt_get_opts }} install $(check-language-support -l {{ item }})
  with_items: "{{ GISLAB_CLIENT_LANGUAGES }}"
  when: GISLAB_SUITE in ('office', 'lab') and GISLAB_CLIENT_LANGUAGES|default(None) != None


# install kernel
- name: Default kernel modules
  lineinfile:
    dest: "{{ root_dir }}/root/etc/modules"
    line: lp
    state: present

- name: Create configuration file for kernel setup
  template:
    src: kernel/kernel-img.conf.j2
    dest: "{{ root_dir }}/root/etc/kernel-img.conf"

- name: Install kernel
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root
    apt-get --no-install-recommends {{ apt_get_opts }} install {{ packages_kernel|join(' ') }}
  args:
    executable: /bin/bash


# Install VirtualBox Guest additions
# Latest kernel version supported by VirtualBox Guest additions on Ubuntu 12.04
# is version 3.8. For manual installation run following command:
# $ dkms install -m virtualbox-guest/<vbox-version> -k <kernel-version>/<ARCH>

# We always reinstall (--reinstall) packages to fix broken cross-compilation,
# happening when modules are rebuild on system upgrade by DKMS trigger without
# proper configuration of BUILD_TARGET_ARCH variable.

- name: Install VirtualBox Guest additions
  shell: >
    if [ '{{ GISLAB_CLIENT_ARCHITECTURE }}' == 'amd64' ]; then
      export BUILD_TARGET_ARCH=amd64;
    else
      export BUILD_TARGET_ARCH=x86;
    fi
    &&
    chroot {{ root_dir }}/root
    apt
    --reinstall
    --no-install-recommends {{ apt_get_opts }} install {{ packages_virtualbox|join(' ') }}
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT

- name: Remove local VirtualBox file sharing group (vboxsf)
  shell: >
    chroot {{ root_dir }}/root
    groupdel vboxsf || true


# remove not needed packages
- name: Remove packages
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root {{ item }}
  args:
    executable: /bin/bash
  with_items:
    - apt-get --assume-yes purge {{ packages_remove|join(' ') }}
    - apt-get --assume-yes autoremove

# fix resolv.conf (broken link after resolvconf package removal)
- name: Copy resolv.conf from server
  shell: >
    cp --remove-destination --dereference
    /etc/resolv.conf {{ root_dir }}/root/etc/resolv.conf

### CONFIGURATION
# ssh
- name: Install SSH server configuration
  command: >
    cp
    /etc/ssh/sshd_config
    {{ root_dir }}/root/etc/ssh/sshd_config


# nfs
- name: Configure NFS
  template:
    src: nfs/idmapd.conf.j2
    dest: "{{ root_dir }}/root/etc/idmapd.conf"

- name: Create mount points for home and shared directories
  file:
    dest: "{{ root_dir }}/root{{ item }}"
    state: directory
  with_items:
    - /mnt/home
    - /mnt/repository
    - /mnt/barrel
    - /mnt/publish


# ldap
- name: Enable LDAP authentication
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    chroot {{ root_dir }}/root pam-auth-update --force
  args:
    executable: /bin/bash

- name: Install LDAP configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
  with_items:
    - {
        src: "ldap/ldap/ldap.conf.j2",
        dest: "/etc/ldap/ldap.conf"
      }
    - {
        src: "ldap/ldap.conf.j2",
        dest: "/etc/ldap.conf"
      }

- name: Install sudo-ldap package
  shell: >
    export DEBIAN_FRONTEND=noninteractive
    &&
    export SUDO_FORCE_REMOVE=yes
    &&
    chroot {{ root_dir }}/root
    apt-get --no-install-recommends {{ apt_get_opts }} install sudo-ldap
  args:
    executable: /bin/bash

- name: Install NSS configuration file (configure sudo to use LDAP)
  template:
    src: nsswitch/nsswitch.conf.j2
    dest: "{{ root_dir }}/root/etc/nsswitch.conf"


# ntp
- name: Configure client to use server.gis.lab for setting time at start
  template:
    src: ntp/ntpdate.j2
    dest: "{{ root_dir }}/root/etc/default/ntpdate"


# syslog
- name: Install syslog configuration
  template:
    src: syslog/gislab.conf.j2
    dest: "{{ root_dir }}/root/etc/rsyslog.d/gislab.conf"


# lightdm
- name: Install Lightdm configuration
  template:
    src: lightdm/conf/lightdm.conf.j2
    dest: "{{ root_dir }}/root/etc/lightdm/lightdm.conf"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install Lightdm greeter configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
  with_items:
    - {
        src: lightdm/conf/lightdm-gtk-greeter.conf.j2,
        dest: /etc/lightdm/lightdm-gtk-greeter.conf
      }
    - {
        src: lightdm/conf/greeter.ui.j2,
        dest: /usr/share/lightdm-gtk-greeter-settings/greeter.ui
      }
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Create directory for Lightdm hooks
  file:
    dest: "{{ root_dir }}/root{{ GISLAB_PATH_SYSTEM }}/session/hooks"
    state: directory
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install Lightdm hooks
  template:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
    mode: 0755
  with_items:
    - {
        src: "lightdm/bin/session-setup.sh.j2",
        dest: "{{ GISLAB_PATH_SYSTEM }}/session/hooks/session-setup.sh"
      }
    - {
        src: "lightdm/bin/session-cleanup.sh.j2",
        dest: "{{ GISLAB_PATH_SYSTEM }}/session/hooks/session-cleanup.sh"
      }
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install Lightdm theme
  copy:
    src: static/desktop/themes/GIS.lab-lightdm
    dest: "{{ root_dir }}/root/usr/share/themes/"
  when:
    GISLAB_SUITE in ('office', 'lab')


# disabling useless services
- name: Disable useless system services
  command: >
    rm -f {{ root_dir }}/root/etc/rc?.d/???{{ item }}
    {{ root_dir }}/root/etc/init.d/{{ item }}
    {{ root_dir }}/root/etc/init/{{ item }}.conf
  with_items:
    - alsa-restore
    - alsa-store
    - grub-common
    - modemmanager
    - nbd-client
    - plymouth-stop
    - rfkill-store
    - tty2
    - tty3
    - tty4
    - tty5
    - tty6
    - unattended-upgrades
    - urandom
    - ureadahead
    - ureadahead-other

- name: Disable all cron jobs by default
  shell: >
    find {{ root_dir }}/root/etc/cron.* -type f
    | grep -v "placeholder"
    | xargs rm -f


### SHUTDOWN
# Replacing shutdown commands with simple script, which will umount all network
# disks and immediately power off machine without trying to cleanly stop
# services. This is a workaround to a problems with various shutdown problems
# caused by network mounted root and NBD itself (see LP #696454).

# 'reboot' binary performs 'reboot' and also 'poweroff' task depending on the
# file name called. This is the reason why '/sbin/poweroff' is a symlink to
# '/sbin/reboot'. This fix takes to account this behavior.

- name: Create new directory for 'reboot' binary
  file:
    dest: "{{ root_dir }}/root/sbin/gislab"
    state: directory

- name: Remove 'poweroff' command (symlink)
  file:
    dest: "{{ root_dir }}/root/sbin/poweroff"
    state: absent

- name: Remove 'shutdown' command
  file:
    dest: "{{ root_dir }}/root/sbin/shutdown"
    state: absent

- name: Move 'reboot' binary to new directory
  command: >
    mv
    {{ root_dir }}/root/sbin/reboot
    {{ root_dir }}/root/sbin/gislab/reboot
  args:
    creates: "{{ root_dir }}/root/sbin/gislab/reboot"

- name: Re-create poweroff command as a symlink to moved reboot binary
  file: src=reboot dest="{{ root_dir }}/root/sbin/gislab/poweroff" state=link force=yes

- name: Install custom reboot script
  copy:
    src: static/bin/reboot
    dest: "{{ root_dir }}/root/sbin/reboot"
    mode: 0755

- name: Install custom poweroff script
  copy:
    src: static/bin/poweroff
    dest: "{{ root_dir }}/root/sbin/poweroff"
    mode: 0755

- name: Install custom shutdown script
  copy:
    src: static/bin/poweroff
    dest: "{{ root_dir }}/root/sbin/shutdown"
    mode: 0755


### DESKTOP
# GIS.lab client tools
- name: Install GIS.lab shell functions library
  copy:
    src: functions.sh
    dest: "{{ root_dir }}/root{{ GISLAB_PATH_SYSTEM }}/functions.sh"
    mode: 0644

- name: Install GIS.lab client tools
  copy:
    src: static/gislab-client-tools/
    dest: "{{ root_dir }}/root/usr/local/bin/"
    mode: 0755
  when:
    GISLAB_SUITE in ('office', 'lab')


# GIS.lab client desktop customizations
- name: Configure default home directories structure
  template:
    src: desktop/home-directories/user-dirs.defaults.j2
    dest: "{{ root_dir }}/root/etc/xdg/user-dirs.defaults"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install XFCE desktop configuration
  template:
    src: desktop/xfce/{{ item }}.j2
    dest: "{{ root_dir }}/root/etc/xdg/xdg-xubuntu/xfce4/xfconf/xfce-perchannel-xml/{{ item }}"
  with_items:
    - keyboard-layout.xml
    - thunar-volman.xml
    - xfce4-desktop.xml
    - xfce4-keyboard-shortcuts.xml
    - xfce4-notifyd.xml
    - xfce4-session.xml
    - xfwm4.xml
    - xsettings.xml
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install XFCE panel configuration file
  template:
    src: desktop/panel/default.xml
    dest: "{{ root_dir }}/root/etc/xdg/xdg-xubuntu/xfce4/panel/default.xml"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install Conky configuration
  template:
    src: desktop/conky/conky.conf.j2
    dest: "{{ root_dir }}/root/etc/conky/conky.conf"
  when:
    GISLAB_SUITE in ('office', 'lab')


- name: Install XFCE menu configuration file
  copy:
    src: static/desktop/menu/xfce-applications.menu
    dest: "{{ root_dir }}/root/etc/xdg/xdg-xubuntu/menus/xfce-applications.menu"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install desktop directories files
  copy:
    src: static/desktop/menu/directories/
    dest: "{{ root_dir }}/root/usr/share/desktop-directories/"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install office suite applications files
  copy:
    src: static/desktop/menu/applications/office/
    dest: "{{ root_dir }}/root/usr/share/applications/"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install lab suite applications files
  copy:
    src: static/desktop/menu/applications/lab/
    dest: "{{ root_dir }}/root/usr/share/applications/"
  when:
    GISLAB_SUITE == 'lab'


- name: Install desktop theme
  copy:
    src: static/desktop/themes/GIS.lab
    dest: "{{ root_dir }}/root/usr/share/themes/"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install wallpapers
  copy:
    src: static/desktop/wallpapers/
    dest: "{{ root_dir }}/root/usr/share/xfce4/backdrops/"
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install icons
  copy:
    src: static/desktop/icons/
    dest: "{{ root_dir }}/root/usr/share/pixmaps/"
  when:
    GISLAB_SUITE in ('office', 'lab')


# start Gnome Keyring also in XFCE session
- name: Fix gnome keyring
  command: >
    sed -i "s/OnlyShowIn=.*/OnlyShowIn=GNOME;Unity;XFCE/"
    {{ root_dir }}/root/etc/xdg/autostart/gnome-keyring-pkcs11.desktop
  when:
    GISLAB_SUITE in ('office', 'lab')


- name: Remove plain XFCE and XUbuntu sessions
  shell: >
    rm -f
    {{ root_dir }}/root/usr/share/xsessions/*.desktop
  when:
    GISLAB_SUITE in ('office', 'lab')

- name: Install GIS.lab desktop client session
# session file must be called 'xubuntu.desktop', otherwise LightDM will set
# variable DESKTOP_SESSION to invalid value
  template:
    src: desktop/xsession/gislab-client.desktop.j2
    dest: "{{ root_dir }}/root/usr/share/xsessions/xubuntu.desktop"
  when:
    GISLAB_SUITE in ('office', 'lab')


### CLUSTER
- name: Install Serf encryption key
  shell: >
    cp
    {{ GISLAB_PATH_SECRET }}/gislab_serf.key
    {{ root_dir }}/root/{{ GISLAB_PATH_SECRET }}/gislab_serf.key

- name: Create directory for Serf handlers
  file:
    path: "{{ root_dir }}/root{{ root_dir_cluster }}/handlers"
    state: directory

- name: Install Serf handlers scripts
  copy:
    src: static/serf/
    dest: "{{ root_dir }}/root{{ root_dir_cluster }}/handlers"
    mode: 0774

- name: Install reboot Serf handler
  shell: >
    ln -sf
    shutdown.sh
    {{ root_dir }}/root{{ root_dir_cluster }}/handlers/reboot.sh

- name: Install Serf agent systemd unit file
  template:
    src: templates/systemd/serf-agent.service.j2
    dest: "{{ root_dir }}/root/etc/systemd/system/serf-agent.service"

- name: Enable Serf agent systemd unit
  command: >
    chroot {{ root_dir }}/root systemctl enable serf-agent.service

- name: Install Serf join systemd unit file
  template:
    src: systemd/serf-join.service.j2
    dest: "{{ root_dir }}/root/etc/systemd/system/serf-join.service"

- name: Enable Serf join systemd unit
  command: >
    chroot {{ root_dir }}/root systemctl enable serf-join.service


# statistics
- name: Install munin configuration file
  template:
    src: munin-node/munin-node.conf.j2
    dest: "{{ root_dir }}/root/etc/munin/munin-node.conf"

- name: Disable all munin plugins
  shell: "{{ item }}"
  with_items:
    - rm -f {{ root_dir }}/root/etc/munin/plugins/*
    - echo > {{ root_dir }}/root/etc/munin/plugin-conf.d/munin-node

- name: Enable only required munin plugins
  file:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
    state: link
    force: yes
  with_items:
    - {
        src: "/usr/share/munin/plugins/cpu",
        dest: "/etc/munin/plugins/cpu"
      }
    - {
        src: "/usr/share/munin/plugins/load",
        dest: "/etc/munin/plugins/load"
      }
    - {
        src: "/usr/share/munin/plugins/memory",
        dest: "/etc/munin/plugins/memory"
      }
    - {
        src: "/usr/share/munin/plugins/processes",
        dest: "/etc/munin/plugins/processes"
      }
    - {
        src: "/usr/share/munin/plugins/uptime",
        dest: "/etc/munin/plugins/uptime"
      }
    - {
        src: "/usr/share/munin/plugins/vmstat",
        dest: "/etc/munin/plugins/vmstat"
      }


### OWS WORKER
# Xvfb
- name: Install Xvfb configuration files
  command: >
    cp --parents
    {{ item }}
    {{ root_dir }}/root/
  with_items:
    - /etc/systemd/system/xvfb.service
  when: GISLAB_SUITE in ('server', 'lab')

# mapserver
- name: Copy default web page content from server
  command: >
    cp --parents
    {{ GISLAB_PATH_WWW }}/index.html
    {{ root_dir }}/root/
  when: GISLAB_SUITE in ('server', 'lab')

- name: Copy Lighttpd configuration for QGIS Server from server
  command: >
    cp --parents
    {{ item }}
    {{ root_dir }}/root/
  with_items:
    - /etc/lighttpd/lighttpd.conf
    - /etc/lighttpd/conf-enabled/10-fastcgi.conf
  when: GISLAB_SUITE in ('server', 'lab')


### POST-INSTALLATION CLEANUP
# apt
- name: Deactivate shared apt cache
  command: umount {{ root_dir }}/root/var/cache/apt

- name: Disable Apt cache proxy server
  shell: >
    sed -i "s/^/# /g"
    {{ root_dir }}/root/etc/apt/apt.conf.d/02proxy


# shared packages cache
- name: Deactivate shared packages cache
  command: umount {{ root_dir }}/root{{ GISLAB_PATH_CACHE }}/packages


- name: Remove mount point for shared packages cache
  file:
    dest: "{{ root_dir }}/root/storage"
    state: absent


# daemons handling
- name: Enable daemons handling in chroot
  file:
    dest: "{{ root_dir }}/root{{ item }}"
    state: absent
  with_items:
    - /usr/sbin/policy-rc.d
    - /sbin/start-stop-daemon

- name: Restore 'start-stop-daemon' binary
  command: >
    mv
    {{ root_dir }}/root/sbin/start-stop-daemon.real
    {{ root_dir }}/root/sbin/start-stop-daemon


# umount filesystems mounted inside chroot -always mount /dev/pts before /proc !
- name: Umount devices inside chroot
  command: >
    chroot {{ root_dir }}/root
    umount {{ item }}
  with_items:
    - /dev/pts
    - /proc


### INITRAMFS AND INIT
- name: Create directories for initramfs-tools
  file:
    dest: "{{ root_dir }}/root{{ item }}"
    state: directory
    recurse: yes
  with_items:
    - /usr/share/initramfs-tools/conf.d
    - /usr/share/initramfs-tools/hooks
    - /usr/share/initramfs-tools/scripts/init-bottom
    - /usr/share/initramfs-tools/scripts/init-premount
    - /usr/share/initramfs-tools/scripts/local-top

- name: Install initramfs-tools hooks and scripts
  copy:
    src: "{{ item.src }}"
    dest: "{{ root_dir }}/root{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "static/initramfs-tools/hooks/gislab",
        dest: "/usr/share/initramfs-tools/hooks/gislab",
        mode: "0755"
      }
    - {
        src: "static/initramfs-tools/hooks/udhcp",
        dest: "/usr/share/initramfs-tools/hooks/udhcp",
        mode: "0755"
      }
    - {
        src: "static/initramfs-tools/scripts/init-bottom/gislab",
        dest: "/usr/share/initramfs-tools/scripts/init-bottom/gislab",
        mode: "0755"
      }
    - {
        src: "static/initramfs-tools/scripts/local-top/nbd",
        dest: "/usr/share/initramfs-tools/scripts/local-top/nbd",
        mode: "0755"
      }
    - {
        src: "static/initramfs-tools/scripts/local-top/nbd_gislab",
        dest: "/usr/share/initramfs-tools/scripts/local-top/nbd_gislab",
        mode: "0755"
      }

- name: Install uDHCP client script
  template:
    src: initramfs-tools/scripts/init-premount/udhcp.j2
    dest: "{{ root_dir }}/root/usr/share/initramfs-tools/scripts/init-premount/udhcp"
    mode: 0755

- name: Install system init script
  copy:
    src: static/init/init-gislab
    dest: "{{ root_dir }}/root/sbin/init-gislab"
    mode: 0755

- name: Install GIS.lab init script
  template:
    src: init/gislab-init.sh.j2
    dest: "{{ root_dir }}/root{{ GISLAB_PATH_SYSTEM }}/gislab-init.sh"
    mode: 0755

- name: Configure GIS.lab client service
  template:
    src: init/gislab.conf.j2
    dest: "{{ root_dir }}/root/etc/init/gislab.conf"
    mode: 0644

- name: Update initramfs
  shell: >
    chroot {{ root_dir }}/root
    update-initramfs -u


### PUBLISHING
- name: Create directory for published files via HTTP
  file:
    dest: "{{ GISLAB_PATH_WWW }}/clients/desktop"
    state: directory
    recurse: yes

- name: Install Gisquick QGIS plugin
  git:
    repo: https://github.com/gislab-npo/gisquick-qgis-plugin
    dest: "{{ root_dir }}/root/usr/share/qgis/python/plugins/gisquick"
    version: release-2_0
  when: GISLAB_GISQUICK_INTEGRATION

- name: Install Gisquick applications files
  copy:
    src: static/desktop/menu/applications/gisquick/
    dest: "{{ root_dir }}/root/usr/share/applications/"
  when: GISLAB_GISQUICK_INTEGRATION


### IMAGE
- include_tasks: provider-default.yml
  when: GISLAB_PROVIDER in ('default', 'gislab-unit')

- include_tasks: provider-aws.yml
  when: GISLAB_PROVIDER == 'aws'

- name: Publish GIS.lab client build stamp file
  file:
    src: "{{ root_dir }}/image/gislab_desktop.buildstamp"
    dest: "{{ GISLAB_PATH_WWW }}/clients/desktop/gislab_desktop.buildstamp"
    state: link
    force: yes


- meta: flush_handlers

# vim: set ts=8 sts=2 sw=2 et:
