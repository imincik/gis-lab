---
#
###  LDAP DATABASE ###
#
# Install and configure authentication server.
#
# Logging: syslog


- name: Install packages
  apt:
    name:
      - gnutls-bin
      - ldapscripts
      - libpam-pwquality
      - libpam-ldap
      - ldap-utils
      - libnss-ldap
      - members
      - pwgen
      - python3-ldap
      - slapd
      - ssl-cert
    force: yes
    install_recommends: no
    state: latest


- name: Add 'openldap' user to 'ssl-cert' group
  shell: adduser openldap ssl-cert 2> /dev/null || true


- name: Detect if LDAP is installed
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// '(o=gis.lab)' 2>/dev/null
    || echo 'LDAP DB EMPTY'
  args:
    executable: /bin/bash
  register: ldap_db_status
  changed_when: False


### LDAP STORAGE
# update apparmor
- name: Allow access for slapd to storage directory
  template:
    src: apparmor/usr.sbin.slapd.j2
    dest: /etc/apparmor.d/local/usr.sbin.slapd

- name: Reload apparmor service
  service:
    name: apparmor
    state: reloaded


# move ldap to storage
- name: Stop LDAP database
  service:
    name: slapd
    state: stopped

- name: Move LDAP database to storage directory (run only once)
  shell: >
    mv -f /var/lib/ldap {{ GISLAB_PATH_APPLICATIONS }}/
    &&
    ln -s {{ GISLAB_PATH_APPLICATIONS }}/ldap /var/lib/ldap
  args:
    creates: "{{ GISLAB_PATH_APPLICATIONS }}/ldap/data.mdb"

- name: Start LDAP service
  service:
    name: slapd
    state: started


# load new configuration
- name: Load LDAP database storage directory configuration (run only once)
  template:
    src: ldap/change_ldap_directory.ldif.j2
    dest: /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- name: Install LDAP database storage directory configuration (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# remove old storage directory
- name: Remove old LDAP database storage directory
  file:
    dest: /var/lib/ldap
    state: absent


### PAM
- name: Configure PAM to use Unix and LDAP authentication
  shell: DEBIAN_FRONTEND=noninteractive pam-auth-update --force

- name: Configure PAM to use LDAP
  template:
    src: ldap/ldap-pam.conf.j2
    dest: /etc/ldap.conf


- name: LDAP clients configuration
# configure base DN and URI and disable certificates verification
  template:
    src: ldap/ldap.conf.j2
    dest: /etc/ldap/ldap.conf
  notify:
    - service slapd restart

- name: Configure nsswitch
  template:
    src: ldap/nsswitch.conf.j2
    dest: /etc/nsswitch.conf
  notify:
    - service slapd restart


# LDAP admin credentials
- name: Generate LDAP admin password (run only once)
  shell: >
    pwgen -s -N 1 10 > {{ GISLAB_PATH_SECRET }}/gislab_ldap_admin_password.txt
    &&
    chmod 600 {{ GISLAB_PATH_SECRET }}/gislab_ldap_admin_password.txt
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab_ldap_admin_password.txt"

- name: Get LDAP admin password
  shell: cat {{ GISLAB_PATH_SECRET }}/gislab_ldap_admin_password.txt
  register: ldap_admin_password
  changed_when: False

- name: Generate hash of LDAP admin password
  shell: slappasswd -s {{ ldap_admin_password.stdout }} -h {SSHA}
  register: ldap_admin_password_hash
  changed_when: False

- name: Save LDAP admin password to LDAP db
  shell: >
    printf 'dn: olcDatabase={1}mdb,cn=config\nreplace: olcRootPW\nolcRootPW:
    {{ ldap_admin_password_hash.stdout }}\n'
    | ldapmodify -Q -Y EXTERNAL -H ldapi:///


### SSL
- name: Configure certificate authority
  template:
    src: ssl/ca.info.j2
    dest: /etc/ssl/ca.info


- name: Generate self signed certificates and private key for encrypted LDAP communication (run only once)
  shell: "{{ item }}"
  with_items:
    - certtool --generate-privkey > {{ GISLAB_PATH_SECRET }}/gislab_ldap_private_cakey.pem
    - certtool --generate-self-signed
      --load-privkey {{ GISLAB_PATH_SECRET }}/gislab_ldap_private_cakey.pem
      --template /etc/ssl/ca.info
      --outfile {{ GISLAB_PATH_SECRET }}/gislab_ldap_cert_cacert.pem
    - certtool --generate-privkey
      --bits 1024
      --outfile {{ GISLAB_PATH_SECRET }}/gislab_ldap_private_server_slapd_key.pem
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab_ldap_private_server_slapd_key.pem"

- name: Install self signed certificates and private key for encrypted LDAP communication
  shell: "{{ item }}"
  with_items:
    - cp
      {{ GISLAB_PATH_SECRET }}/gislab_ldap_private_cakey.pem
      /etc/ssl/private/cakey.pem
    - cp
      {{ GISLAB_PATH_SECRET }}/gislab_ldap_cert_cacert.pem
      /etc/ssl/certs/cacert.pem
    - cp
      {{ GISLAB_PATH_SECRET }}/gislab_ldap_private_server_slapd_key.pem
      /etc/ssl/private/server_slapd_key.pem
    - chgrp ssl-cert /etc/ssl/private/server_slapd_key.pem
    - chmod g+r /etc/ssl/private/server_slapd_key.pem
    - chmod o-r /etc/ssl/private/server_slapd_key.pem
  notify:
    - service slapd restart

- name: Configure server
  template:
    src: ssl/server.info.j2
    dest: /etc/ssl/server.info


- name: Generate certificate for encrypted LDAP communication (run only once)
  shell: >
    certtool
    --generate-certificate
    --load-privkey /etc/ssl/private/server_slapd_key.pem
    --load-ca-certificate /etc/ssl/certs/cacert.pem
    --load-ca-privkey /etc/ssl/private/cakey.pem
    --template /etc/ssl/server.info
    --outfile {{ GISLAB_PATH_SECRET }}/gislab_ldap_cert_server_slapd_cert.pem
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab_ldap_cert_server_slapd_cert.pem"

- name: Install certificate for encrypted LDAP communication
  shell: >
    cp
    {{ GISLAB_PATH_SECRET }}/gislab_ldap_cert_server_slapd_cert.pem
    /etc/ssl/certs/server_slapd_cert.pem
  notify:
    - service slapd restart


- name: Load TLS certificates configuration
  template:
    src: ldap/tls-certificates.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install TLS certificates configuration (run only once)
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"
  notify:
    - service slapd restart


### LDAP
# LDAP sudo
- name: Install LDAP sudo support
  shell: >
    DEBIAN_FRONTEND=noninteractive
    SUDO_FORCE_REMOVE=yes
    apt -y install sudo-ldap
  notify:
    - service slapd restart

- name: Load sudo LDAP schema
  template:
    src: ldap/sudo-schema.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install sudo LDAP schema (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# LDAP Postfix schema
- name: Load Postfix LDAP schema
  template:
    src: ldap/postfix-schema.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install Postfix LDAP schema (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# LDAP indexes
- name: Load LDIF file for removing indexes
  template:
    src: ldap/remove-indexes.ldif.j2
    dest: /tmp/ldap.ldif

- name: Remove LDAP indexes
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- name: Load LDAP indexes
  template:
    src: ldap/indexes.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install LDAP indexes (run only once)
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# GIS.lab LDAP tree
- name: Load GIS.lab LDAP tree
  template:
    src: ldap/gislab-tree.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install GIS.lab LDAP tree (run only once)
  shell: >
    ldapadd -Z
    -w {{ ldap_admin_password.stdout }}
    -D "cn=admin,dc=gis,dc=lab"
    -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- meta: flush_handlers


# LDAPscripts
- name: Configure LDAP scripts
  template:
    src: ldapscripts/ldapscripts.conf.j2
    dest: /etc/ldapscripts/ldapscripts.conf

- name: Install LDAP scripts user's and group's templates
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: "ldapscripts/adduser.template.j2",
        dest: "/etc/ldapscripts/adduser.template"
      }
    - {
        src: "ldapscripts/addgroup.template.j2",
        dest: "/etc/ldapscripts/addgroup.template"
      }

- name: Save LDAP admin password to LDAP scripts (run only once)
  shell: >
    printf "{{ ldap_admin_password.stdout }}"> /etc/ldapscripts/ldapscripts.passwd
    &&
    chmod 0600 /etc/ldapscripts/ldapscripts.passwd


### LOGGING
- name: Load LDAP logging configuration
  template:
    src: ldap/logging.ldif.j2
    dest: /tmp/ldap.ldif

- name: Install LDAP logging configuration
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif


### THE END
- name: Remove temporary 'ldif' file
  file:
    path: /tmp/ldap.ldif
    state: absent

# vim: set ts=8 sts=2 sw=2 et:
